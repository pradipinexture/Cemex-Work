<link rel="stylesheet" href="https://cxprod-cdn.cemex.com/vanilla-datatables/latest/vanilla-dataTables.min.css" />
<link rel="stylesheet" href="https://cxprod-cdn.cemex.com/locations/latest/css/toaster.css">
<link rel="stylesheet" href="https://cxprod-cdn.cemex.com/locations/latest/widget_template/css/view-locations.css">

<script src="https://cxprod-cdn.cemex.com/vanilla-datatables/latest/vanilla-dataTables.min.js"></script>
<script type="module" src="https://www.cemexgo.com/cdn/web-components/latest/cmx-web-components/cmx-web-components.esm.js"></script>
<script nomodule src="https://www.cemexgo.com/cdn/web-components/latest/cmx-web-components/cmx-web-components.js"></script>
<style>
.dataTable-main .action-main #planttype-data.dropdown-menu {
    left: 493px;
}
.dataTable-main .action-main .planttype-dropdown-toggle {
    
    display: flex;
    align-items: center;
    justify-content: space-between;
    overflow: hidden;
    border: 1px solid #B0B0B0;
    width: 240px;
    position: absolute;
    height: 40px;
    top: -10px;
    left: 493px;
    border-radius: 8px;
    background-color: #fff;
    color: #333;
    font-size: 16px;
    text-align: left;
    font-family: 'Roboto', sans-serif;
}

.dataTable-main .action-main .planttype-dropdown-toggle .caret {
    color: #0074D4;
}

.dataTable-main .action-main .btn-primary.planttype-dropdown-toggle:hover,
.dataTable-main .action-main .btn-primary.planttype-dropdown-toggle:focus {
    background-color: transparent;
    color: #333;
    border: 1px solid #B0B0B0;
    outline: none;
}

	.dataTable-main .action-main .region-dropdown-toggle{
      display: flex;
    align-items: center;
    justify-content: space-between;
    overflow: hidden;
}

	.dropdown-toggle::after{
  margin-left: auto;
}
	
	@media (max-width: 1600px)  {
  .location-table .dataTable-wrapper{
     margin-top: 150px;
  }
  .action-main .action-btn{
     top: 80px;
  }
}

@media (max-width: 768px)  {
  .location-table .dataTable-wrapper{
     margin-top: 380px;
  }
  .action-main .action-btn .round-btn {
    width: 100%;
		margin-top: 5px;
  }

  .location-table .dataTable-wrapper .dataTable-search{
    top: 40px;
    left: 0;
  }
  .dataTable-main .action-main .planttype-dropdown-toggle{
    top :90px;
    left: 0;
  }
  .action-main .action-btn{
     top: 160px;
  }

}

@media (max-width: 450px){
    .location-table .dataTable-wrapper .dataTable-search{
    top: 40px;
    left: 0;
    width: 100%;
	  padding: 0 12px;
  }
  
  .dataTable-main .action-main .planttype-dropdown-toggle{
    top :90px;
    left: 0;
    width: 100%;
  }
	.dataTable-main .action-main .region-dropdown-toggle ,.location-table .dataTable-wrapper .dataTable-search .dataTable-input{
	  width: 100%;
	}
}
</style>
<style>	
tr.approval-disabled {
  opacity: 0.5;
  background-color: #f0f0f0;
  cursor: not-allowed;
  position: relative;
}

tr.approval-disabled td a.location, tr.approval-disabled td ul.custom-dropdown {
  pointer-events: none;
}

tr.approval-disabled {
  pointer-events: auto;
}

tr.approval-disabled:hover::after {
  content: "This location is under workflow review. For more information, kindly reach out to system administrator.";
  position: absolute;
  top: -25px;
  left: 50%;
  transform: translateX(-50%);
  background: #333;
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  white-space: nowrap;
  z-index: 10;
}
</style>
<script>var uniqueValues = []</script>
<main>
    <div id="overlay">
        <div class="cv-spinner"></div>  
    </div>
    <div class="container location-table dataTable-main newdatatable">
        <div class="row">
            <div class="col-md-12">
                <div class="action-main">
                    <div class="dropdown" id="region-dropdown">
                        <button class="btn btn-primary dropdown-toggle region-dropdown-toggle" type="button" data-toggle="dropdown" id="filter-dropdown">Region <span class="caret"></span></button>
                        <ul id="region-data" class="dropdown-menu" aria-labelledby="filter-dropdown"><li data-filter="All">All</li></ul>
                    </div>
					<div class="dropdown" id="planttype-dropdown">
                      <button class="btn btn-primary dropdown-toggle planttype-dropdown-toggle" type="button" id="planttype-filter-dropdown">
                        Plant Type <span class="caret"></span>
                      </button>
                      <ul id="planttype-data" class="dropdown-menu" aria-labelledby="planttype-filter-dropdown">
                        <li data-filter="All">All</li>
                      </ul>
                    </div>

                    <div class="action-btn">
                        <span id="selected-check-count">0</span><span> items selected</span>
                        <button type="button" id="import-csv-button open-modal-button" class="btn btn-primary round-btn add-file" data-target="bs-file-modal" data-toggle="popup">
                            <cwc-icon name="plus" color="bright-blue" class="hydrated" data-dir="ltr"></cwc-icon>
                            ${languageUtil.get(locale, "importCSV", "Import CSV")}
                        </button>
                        <span class="dropdown" id="download-dropdown">
                            <button type="button" id="csv-button" data-toggle="dropdown" class="btn btn-primary round-btn">
                                ${languageUtil.get(locale, "downloadCSV", "Download CSV")}
                                <cwc-icon name="arrow-down-rounded-fill" color="bright-blue"></cwc-icon>
                            </button>
                            <ul id="download-options" class="dropdown-menu">
                                <li id="download-selected">${languageUtil.get(locale, "downloadSelectedLocs", "Download Selected Locations")}</li>
                                <li id="download-all">${languageUtil.get(locale, "downloadAllLocs", "Download All Locations")}</li>
                            </ul>
                        </span>
                        <button type="button" id="open-locations" class="btn btn-primary round-btn">${languageUtil.get(locale, "openLabel", "Open")}</button>
                        <button type="button" id="close-locations" class="btn btn-primary round-btn">${languageUtil.get(locale, "closeLabel", "Close")}</button>
                    </div>
                </div>
                <table class="table cemex-table">
                    <thead>
                        <tr>
                            <th>${languageUtil.get(locale, "status", "Status")}</th>
                            <th>${languageUtil.get(locale, "nameLable", "Name")}</th>
                            <th>${languageUtil.get(locale, "regionLabel", "Region")}</th>
                            <th>${languageUtil.get(locale, "planType", "Plant Type")}</th>
                            <th>ID</th>
                            <th>${languageUtil.get(locale, "promotionLabel", "Promotion")}</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <#if entries?has_content>
                            <#list entries as curEntry>

                                <#assign renderer=curEntry.getAssetRenderer()>
                                <#assign className=renderer.getClassName()>
                                <#assign journalArticle=renderer.getArticle()>
                                <#assign document=saxReaderUtil.read(journalArticle.getContentByLocale(locale)) />
                                
                                <#assign entryId=journalArticle.articleId />

                                <#assign entryTitle=document.valueOf( "//dynamic-element[@name='Text55119005']/dynamic-content") />
                                <#assign isClosed=document.valueOf( "//dynamic-element[@name='Field53243791']/dynamic-content") />
                                <#assign region=document.valueOf( "//dynamic-element[@name='Field37057184']/dynamic-content") />
                                
                                <#assign assetEntryLocalService=serviceLocator.findService("com.liferay.asset.kernel.service.AssetEntryLocalService") />
                                <#assign assetEntry=assetEntryLocalService.getEntry("com.liferay.journal.model.JournalArticle",journalArticle.getResourcePrimKey()) />
                                <#assign articleCategories=assetEntry.getCategories() />

                                <#assign viewURL= assetPublisherHelper.getAssetViewURL(renderRequest, renderResponse, curEntry, true) />
                                <#assign viewURL = viewURL?split("?") />

                                <#assign latestVersion = journalArticle.getVersion()?number />

                                <#attempt>
                                    <#assign journalArticleLocalService = serviceLocator.findService("com.liferay.journal.service.JournalArticleLocalService") />
                                    <#assign latestVersion = journalArticleLocalService.getLatestVersion(journalArticle.getGroupId(), entryId)?number />

                                <#recover>

                                </#attempt>

                                <tr class="<#if latestVersion gt journalArticle.getVersion()?number>approval-disabled</#if>">
                                    <script>
                                        var regionVal = "${region?default('')}".trim();

                                        if (regionVal && regionVal !== 'null') {
                                            if (!uniqueValues.includes(regionVal)) {
                                                uniqueValues.push(regionVal);
                                            }
                                        }
                                    </script>

                                    <td><div class="<#if isClosed=='true'>red<#else>green</#if>"><#if isClosed=='true'>Closed<#else>Open</#if></div></td>
                                    <td><a href="${viewURL[0]}" class="location">${entryTitle}</a></td>
                                    <td>${region!!!"-"}</td>
                                    <td>
                                        <#if articleCategories?has_content><#list articleCategories as articleCategory>${articleCategory.getName()}<#if articleCategory?has_next>, </#if></#list><#else>-</#if>
                                    </td>
                                    <td class="location-id">${entryId}</td>
                                    <td><cwc-icon name="arrow-increase" color="bright-green"></cwc-icon></td>
                                    <td>
                                        <ul class="custom-dropdown">
                                            <li>
                                                <svg aria-hidden="true" class="lexicon-icon lexicon-icon-ellipsis-v">
                                                    <use xlink:href="/o/classic-theme/images/clay/icons.svg#ellipsis-v" />
                                                </svg>
                                                <ul>
                                                    <li><a href="${viewURL[0]}" data-senna-off="true">${languageUtil.get(locale, "viewDetails", "View Details")}</a></li>
                                                    <li><a class="edit-record" href="add-location?articleId=${entryId}" data-senna-off="true">${languageUtil.get(locale, "editLabel", "Edit")}</a></li>
                                                    <li><a class="close-location" href="#" data-entry-value="${entryId}">${languageUtil.get(locale, "closeLocation", "Close Location")}</a></li>
                                                    <li><a class="open-location" href="#" data-entry-value="${entryId}">${languageUtil.get(locale, "openLocation", "Open Location")}</a></li>
                                                </ul>
                                            </li>
                                        </ul>
                                    </td>
                                </tr>
                            </#list>                        
                        </#if>

                    </tbody>
                </table>
            </div>

            <div id="bs-file-modal" class="bs-file-modal popup" style="display: none;">
                <div class="popup-window">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h4 class="modal-title">${languageUtil.get(locale, "fileInformation", "File Information")}</h4>
                        </div>
                        <form id="contactForm" onsubmit="return false;">
                            <div class="modal-body">
                                <input type="hidden" value="" class="file-update-id" />
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <div class="form-item">
                                                <input class="input-focus" type="text" id="filename" autocomplete="off" required />
                                                <label for="filename">${languageUtil.get(locale, "nameOfImportLabel", "Name of Import")}</label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <div class="form-item">
                                                <span class="control-fileupload">
                                                    <label for="file">${languageUtil.get(locale, "chooseFileLabel", "Choose a file")}:</label>
                                                    <input type="file" id="file" required />
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default common-btn popup-close">${languageUtil.get(locale, "cancelLabel", "Cancel")}</button>
                                <button id="save-csv-file" type="submit" class="btn btn-primary common-btn blue-btn">${languageUtil.get(locale, "saveLabel", "Save")}</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<script src="https://cxprod-cdn.cemex.com/locations/latest/js/toaster.js"></script>
<script>
    var searchLabel = "${languageUtil.get(locale, 'searchLabel', 'Search')}";
    var exportWait = "${languageUtil.get(locale, 'exportWait', 'Please wait, we are exporting the locations.')}";
    var noLocations = "${languageUtil.get(locale, 'noLocations', 'No locations available to export.')}";
    var exportError = "${languageUtil.get(locale, 'exportError', 'Export error. Please try again.')}";
    var atleastOne = "${languageUtil.get(locale, 'atleastOne', 'At least one location must be selected.')}";
    var selectedDownloaded = "${languageUtil.get(locale, 'selectedDownloaded', 'CSV file for the selected locations has been downloaded successfully.')}";
    var missingCreate = "${languageUtil.get(locale, 'missingCreate', 'Location is currently missing from our website. We are in the process of creating it.')}";
    var locationNotCreated = "${languageUtil.get(locale, 'locationNotCreated', 'Requested location is not created.')}";
    var fileDataUploadSuccess = "${languageUtil.get(locale, 'fileDataUploadSuccess', 'location-import-status.csv file uploaded successfully')}";
    var fileRequireValidation = "${languageUtil.get(locale, 'fileRequireValidation', 'Please select a file.')}";
    var locationUpdateSuccess = "${languageUtil.get(locale, 'locationUpdateSuccess', 'Location is updated successfully')}";
    var locationUpdateFailMessage = "${languageUtil.get(locale, 'locationUpdateFailMessage', 'Requested location is not updated.')}";
    var locationCreatedMessage = "${languageUtil.get(locale, 'locationCreatedMessage', 'Requested location is created successfully')}";
    var locationFailMessage = "${languageUtil.get(locale, 'locationFailMessage', 'Requested location is not created.')}";
    var warnExportSelect = "${languageUtil.get(locale, 'warnExportSelect', 'Please select any location to export.')}";
    var chooseFile = "${languageUtil.get(locale, 'chooseFile', 'Choose a file')}";
    var folderCreationFail = "${languageUtil.get(locale, 'folderCreationFail', 'Failed to create folder')}";
    var uploadFileCreationFail = "${languageUtil.get(locale, 'uploadFileCreationFail', 'Failed to upload file')}";

    var locationCSVName = "Downloaded Locations.csv";

    function showLoader(isShow=false) {
        var overlayElement = document.getElementById('overlay');
        isShow ? overlayElement.classList.add("show") : overlayElement.classList.remove("show")
    }
	
	  uniqueValues.forEach(function(element) {
        element = element.trim();
        
        const regionData = document.getElementById('region-data');
        const li = document.createElement('li');
        li.setAttribute('data-filter', element);
        li.textContent = element;
        regionData.appendChild(li);
    });

</script>

<script src="/documents/d/global/initial-cz-lo-1-1-?download=true"></script>
<script src="https://cxprod-cdn.cemex.com/locations/latest/widget_template/js/location-strcutre.js"></script>
<--! <script src="https://cxprod-cdn.cemex.com/locations/latest/widget_template/js/datatable-loading.js"></script> --!>

//New Datatable-loading js updated function getRowData(row) chnages
<script>
    var inputs = document.querySelectorAll('.form-item input');

function handleLabelMovement(input) {
    try{
        if(!input) return;
        var formItem = input.closest('.form-item');
        (input.value.trim()) ? formItem.classList.add('move-form-label') : formItem.classList.remove('move-form-label');
    } catch(e){}
}

inputs.forEach(function(input) {
    var originalDescriptor = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');
    
    Object.defineProperty(input, 'value', {
        get: function() {
            return originalDescriptor.get.call(this);
        },
        set: function(val) {
            originalDescriptor.set.call(this, val);
            handleLabelMovement(this);
        }
    });

    input.addEventListener('focus', function() {this.closest('.form-item').classList.add('move-form-label');});
    input.addEventListener('blur', function() {handleLabelMovement(this)});
    input.addEventListener('input', () => handleLabelMovement(this));

    handleLabelMovement(input);
});

// Event listener for opening and closing popup modals
document.addEventListener('click', function (e) {
   e = e || window.event;
   var target = e.target || e.srcElement;

   // Open modal when 'data-toggle="popup"' is clicked
   if (target.hasAttribute('data-toggle') && target.getAttribute('data-toggle') === 'popup') {
      if (target.hasAttribute('data-target')) {
         var m_ID = target.getAttribute('data-target');
         var modal = document.getElementById(m_ID);
         if (modal) {
            modal.classList.add('open');
         }
         e.preventDefault();
      }
   }

   // Close modal window with 'data-dismiss="popup"' or when the backdrop is clicked
   if ((target.hasAttribute('data-dismiss') && target.getAttribute('data-dismiss') === 'popup') || target.classList.contains('popup')) {
      var popupDivs = document.getElementsByClassName('popup');
      if (popupDivs && popupDivs.length > 0) {
         Array.from(popupDivs).forEach(function (item) {
            if (item.classList.contains('open')) {
               item.classList.remove('open');
            }
         });
      }
      e.preventDefault();
   }
}, false);

// Close modal when elements with class "popup-close" are clicked
var popupCloseButtons = document.querySelectorAll('.popup-close');
popupCloseButtons.forEach(function (button) {
   button.addEventListener('click', function () {
      var backdrops = document.querySelectorAll('.modal-backdrop');
      backdrops.forEach(function (backdrop) {
         backdrop.remove();
      });

      var modals = document.querySelectorAll('.bs-file-modal');
      modals.forEach(function (modal) {
         modal.classList.remove('open'); // Mimic 'hide' in Bootstrap
      });
   });
});


var datatable = new DataTable("table", {
    perPage: 5,
});

var selectedRowsMap = {};

// Select All functionality
var init = function () {
    var inputs;
    
    var change = function (e) {
        var input = e.target;
        
        if (input === checkall) {
            // Get only current page checkboxes
            var currentPageCheckboxes = datatable.body.getElementsByClassName("checkbox");
            
            Array.from(currentPageCheckboxes).forEach(function(checkbox) {
                checkbox.checked = input.checked;
                var row = checkbox.closest('tr');
                var rowId = row.querySelector('.location-id').textContent.trim();
                row.classList.toggle("selected", input.checked);
                
                if (input.checked) {
                    selectedRowsMap[rowId] = getRowData(row);
                } else {
                    delete selectedRowsMap[rowId];
                }
            });
        } else {
            var row = input.closest('tr');
            var rowId = row.querySelector('.location-id').textContent.trim();
            
            if (input.checked) {
                selectedRowsMap[rowId] = getRowData(row);
            } else {
                delete selectedRowsMap[rowId];
            }
            row.classList.toggle("selected", input.checked);
        }
        updateSelectedCount();
        updateCheckAllState();
    };

    var update = function () {
        inputs = [].slice.call(datatable.body.getElementsByClassName("checkbox"));
        
        // Update checkbox states based on selectedRowsMap
        inputs.forEach(function(input) {
            var row = input.closest('tr');
            var rowId = row.querySelector('.location-id').textContent.trim();
            input.checked = !!selectedRowsMap[rowId];
            row.classList.toggle("selected", input.checked);
        });
        
        updateCheckAllState();
    };

    var checkall = document.createElement("input");
    checkall.type = "checkbox";
    checkall.className = "select-all-checkbox";

    var data = {
        sortable: false,
        heading: checkall,
        data: []
    };

    for (var n = 0; n < this.data.length; n++) {data.data[n] = '<input type="checkbox" class="checkbox">'}

    datatable.columns().add(data);
    update();

    datatable.container.addEventListener("change", change);

    datatable.on("datatable.page", update);
    datatable.on("datatable.perpage", update);
    datatable.on("datatable.sort", update);
};

function getRowData(row) {
  return {
        status: row.cells[0].textContent.trim(),
        name: row.cells[1].querySelector('a') ? row.cells[1].querySelector('a').textContent.trim() : '',
        region: row.cells[2].textContent.trim(),
        planType: row.cells[3].textContent.trim(),
        id: row.cells[4].textContent.trim()
    };
}

function updateCheckAllState() {
    var checkallBox = document.querySelector('.select-all-checkbox');
    if (!checkallBox) return;

    var currentPageCheckboxes = datatable.body.getElementsByClassName("checkbox");
    var allChecked = Array.from(currentPageCheckboxes).every(function(checkbox) {
        return checkbox.checked;
    });
    
    checkallBox.checked = allChecked && currentPageCheckboxes.length > 0;
}

function getSelectedRows() {
    return Object.values(selectedRowsMap);
}

function updateSelectedCount() {
    document.getElementById("selected-check-count").textContent = 
        Object.keys(selectedRowsMap).length;
}

document.getElementById('region-data').addEventListener('click', function(e) {
    if (e.target.tagName === 'LI') {
        var selectedRegion = e.target.dataset.filter;
        var dropdownButton = document.getElementById('filter-dropdown');
        dropdownButton.textContent = 'Region: ' + selectedRegion + ' ';
        
        var caret = document.createElement('span');
        caret.className = 'caret';
        dropdownButton.appendChild(caret);
        
        // Clear existing selections
        selectedRowsMap = {};
        updateSelectedCount();
        
        // Apply filter
        datatable.search(selectedRegion === 'All' ? '' : selectedRegion);
        
        document.getElementById('region-data').classList.remove('show');
    }
});

document.getElementById("filter-dropdown").addEventListener("click", function (e) {
    e.stopPropagation();
    document.getElementById("region-data").classList.toggle("show")
});

document.getElementById("csv-button").addEventListener("click", function (e) {
    e.stopPropagation();
    document.getElementById("download-options").classList.toggle("show");
});

document.addEventListener("click", function (e) {
    var regionDropdown = document.getElementById("region-data");
    var downloadDropdown = document.getElementById("download-options");
    var filterButton = document.getElementById("filter-dropdown");
    var csvButton = document.getElementById("csv-button");

    if (!filterButton.contains(e.target)) {
        regionDropdown.classList.remove("show");
    }
    if (!csvButton.contains(e.target)) {
        downloadDropdown.classList.remove("show");
    }
});

// Initialize
datatable.on("datatable.init", init);
</script>


<script>
function removeCheckboxClass() {
  document.querySelectorAll('tr.approval-disabled td input.checkbox').forEach(function (input) {input.classList.remove('checkbox')});
}

function changeLocationLink() {
    const contextPath = thanksPage.substring(0, thanksPage.lastIndexOf('/') + 1);

    document.querySelectorAll('ul.custom-dropdown li ul li a.edit-record').forEach(function (link) {
        const href = link.getAttribute('href');

        if (href && !href.startsWith(contextPath)) {
            const newHref = contextPath + href;
            link.setAttribute('href', newHref);
        }
    });
} 

removeCheckboxClass();
changeLocationLink();

// Run on every pagination or redraw
datatable.on('datatable.page', function () {
  removeCheckboxClass();
  changeLocationLink()
});

datatable.on('datatable.update', function () {
  removeCheckboxClass();
  changeLocationLink()
});
</script>
<script src="https://cxprod-cdn.cemex.com/locations/latest/widget_template/js/export-locations.js"></script>
<script src="https://cxprod-cdn.cemex.com/locations/latest/widget_template/js/liferay-functionality.js"></script>
<script>
    // Render the categories
    var interval = setInterval(function() {
      if (productTypeCategories && productTypeCategories.length) {
        var html = '<li data-filter="All">All</li>';
        for (var i = 0; i < productTypeCategories.length; i++) {
          html += '<li data-filter="' + productTypeCategories[i].name + '">' + productTypeCategories[i].name + '</li>';
        }
        document.getElementById('planttype-data').innerHTML = html;
        clearInterval(interval);
      }
    }, 500);


    // 2. Toggle open/close
    document.getElementById('planttype-filter-dropdown').addEventListener('click', function (e) {
      e.stopPropagation();
      document.getElementById('region-data').classList.remove('show'); // Close region if open
      document.getElementById('planttype-data').classList.toggle('show');
    });

    // 3. Handle selection
    document.getElementById('planttype-data').addEventListener('click', function (e) {
      if (e.target.tagName === 'LI') {
        const selected = e.target.dataset.filter;
        const btn = document.getElementById('planttype-filter-dropdown');
        btn.textContent = 'Plant Type: ' + selected + ' ';
        const caret = document.createElement('span');
        caret.className = 'caret';
        btn.appendChild(caret);

        selectedRowsMap = {};
        updateSelectedCount();

        datatable.search(selected === 'All' ? '' : selected);
        document.getElementById('planttype-data').classList.remove('show');
      }
    });

    // 4. Close on outside click
    document.addEventListener('click', function (e) {
      const plantTypeDropdown = document.getElementById('planttype-data');
      const plantTypeButton = document.getElementById('planttype-filter-dropdown');
      if (!plantTypeButton.contains(e.target)) {
        plantTypeDropdown.classList.remove('show');
      }
    });
    

</script>
<script src="https://cxprod-cdn.cemex.com/locations/latest/widget_template/js/import-locations.js"></script>
<script src="https://cxprod-cdn.cemex.com/locations/latest/widget_template/js/open-close-location.js"></script>