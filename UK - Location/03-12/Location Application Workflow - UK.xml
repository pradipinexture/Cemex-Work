<?xml version="1.0"?>
<workflow-definition
	xmlns="urn:liferay.com:liferay-workflow_7.4.0" xsi:schemaLocation="urn:liferay.com:liferay-workflow_7.4.0 http://www.liferay.com/dtd/liferay-workflow-definition_7_4_0.xsd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<name>Location Application Workflow - UK</name>
	<description>Location Application Workflow - UK.</description>
	<version>8</version>
	<state>
		<name>created</name>
		<description>Begin a workflow.</description>
		<metadata>
			<![CDATA[
				{
					"xy": [
						165,
						76
					]
				}
			
]]>
		</metadata>
		<actions>
			<action>
				<name>CSV Bypass Location</name>
				<description></description>
				<script>
					<![CDATA[import com.liferay.journal.model.JournalArticle
import com.liferay.journal.service.JournalArticleLocalServiceUtil
import com.liferay.portal.kernel.service.GroupLocalServiceUtil
import com.liferay.expando.kernel.model.ExpandoBridge
import org.dom4j.Element
import org.dom4j.io.SAXReader
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

UBERALL_ENDPOINT_KEYNAME = "Uberall Endpoint"
UBERALL_BUSINESS_ID_KEYNAME = "Uberall Business Id"
UBERALL_PRIVATE_KEYNAME = "Uberall Private Key"
UBERALL_DUPLICATE_UPDATE_KEYNAME = "Uberall Update Workflow"
CEMEX_LIFERAY_DOMAIN = "http://localhost:8080/"

String className = (String)workflowContext.get("entryClassName")
long classPK = Long.parseLong(workflowContext.get("entryClassPK"))
long groupId = Long.parseLong(workflowContext.get("groupId"))

ExpandoBridge expandoBridge = GroupLocalServiceUtil.getGroup(groupId).getExpandoBridge()
UBERALL_ENDPOINT = (String) expandoBridge.getAttribute(UBERALL_ENDPOINT_KEYNAME, false)
UBERALL_BUSINESS_ID = (String) expandoBridge.getAttribute(UBERALL_BUSINESS_ID_KEYNAME, false)
UBERALL_PRIVATE_KEY = (String) expandoBridge.getAttribute(UBERALL_PRIVATE_KEYNAME, false)
UBERALL_DUPLICATE_UPDATE = (Boolean) expandoBridge.getAttribute(UBERALL_DUPLICATE_UPDATE_KEYNAME, false)

if (UBERALL_ENDPOINT == null || UBERALL_BUSINESS_ID == null || UBERALL_PRIVATE_KEY == null) {
	println "ERROR: Missing Uberall configuration. Skipping execution."
	return
}

UBERALL_API_ENDPOINT = UBERALL_ENDPOINT + "?businessIds=" + UBERALL_BUSINESS_ID
CONTEXT_PATH = CEMEX_LIFERAY_DOMAIN + "/documents/d/location-application-uk/"

def callUberallApi(Map locationData, JournalArticle article) {
	try {
		def jsonBody = JsonOutput.toJson(locationData)
		def isUpdate = article.getVersion() != 1
		def methodType = isUpdate ? "PATCH" : "POST"
		def endpoint = UBERALL_API_ENDPOINT

		if (isUpdate) {
			def locationId = getUberallLocationByArticleId(article.getArticleId(), article.titleCurrentValue)
			if (locationId) {
				endpoint = "${UBERALL_ENDPOINT}/${locationId}"
			} else {
				methodType = "POST"
			}
		}

		def url = new URL(endpoint)
		def connection = url.openConnection()
		connection.setRequestMethod("POST")
		connection.setRequestProperty("Content-Type", "application/json")
		connection.setRequestProperty("privateKey", UBERALL_PRIVATE_KEY)
		connection.setRequestProperty("Cache-Control", "no-cache")

		if (methodType == "PATCH") {
			connection.setRequestProperty("X-HTTP-Method-Override", "PATCH")
		}

		connection.setDoOutput(true)

		def outputStream = connection.getOutputStream()
		outputStream.write(jsonBody.getBytes("UTF-8"))
		outputStream.flush()
		outputStream.close()

		def responseCode = connection.getResponseCode()
		def responseStream = responseCode >= 200 && responseCode < 300 ?
			connection.getInputStream() : connection.getErrorStream()
		def response = responseStream.getText()

		if (responseCode >= 200 && responseCode < 300) {
			return new JsonSlurper().parseText(response)
		} else if (responseCode == 409 && UBERALL_DUPLICATE_UPDATE) {
			def jsonResponse = new JsonSlurper().parseText(response)
			def duplicates = jsonResponse?.response?.duplicates

			if (duplicates && duplicates.size() > 0) {
				def duplicateId = duplicates[0]
				endpoint = "${UBERALL_ENDPOINT}/${duplicateId}"
				locationData.put("id", duplicateId)
				return callUberallApi(locationData, article)
			}
			throw new Exception("Duplicate found but no ID available")
		} else {
			throw new Exception("Failed to call Uberall API: ${responseCode} - ${response}")
		}

	} catch (Exception e) {
		println "ERROR: ${e.message}"
		throw e
	}
}

def getUberallLocationByArticleId(String articleId, String articleName) {
	try {
		def urlString = "${UBERALL_ENDPOINT}?fieldMask=province&fieldMask=name&max=100000&selectAll=true"
		def connection = new URL(urlString).openConnection()
		connection.setRequestMethod('GET')
		connection.setRequestProperty('Content-Type', 'application/json')
		connection.setRequestProperty('privateKey', UBERALL_PRIVATE_KEY)

		def responseCode = connection.getResponseCode()

		if (responseCode == 200) {
			def jsonResponse = new JsonSlurper().parseText(connection.inputStream.text)
			def locations = jsonResponse?.response?.locations

			def foundLocation = locations?.find { location ->
				location.province == articleId || location.name == articleName
			}

			return foundLocation?.id
		}
		return null
	} catch (Exception e) {
		println "ERROR in uberall location search: ${e.message}"
		return null
	}
}

if (className.equals("com.liferay.journal.model.JournalArticle")) {
	try {
		JournalArticle article = JournalArticleLocalServiceUtil.getArticle(classPK)
		def jsonBuilder = [
			businessId: UBERALL_BUSINESS_ID,
			status: "ACTIVE",
			province: article.getArticleId(),
			country: "UK",
			openingHours: [],
			photos: []
		]

		def openingdays = [
			Monday: 1, Tuesday: 2, Wednesday: 3,
			Thursday: 4, Friday: 5, Saturday: 6, Sunday: 7
		]

		if (article) {
			def elements = new SAXReader().read(new StringReader(article.getContent()))
							.getRootElement()
							.elements("dynamic-element")
			def isYextRestricted = elements.find {
				it.attributeValue("field-reference") == "isYextRestrict"
			}?.element("dynamic-content")?.textTrim == "true"

			def isCSVLocation = elements.find {
				it.attributeValue("field-reference") == "isCSVLocation"
			}?.element("dynamic-content")?.textTrim == "true"

			if (isYextRestricted && isCSVLocation) {
			   WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);

			   elements.each { element ->
				   def key = element.attributeValue("field-reference")
				   def valueContent = element.element("dynamic-content")

				   if (valueContent) {
					   def value = valueContent.textTrim

					   switch(key) {
						   case "Geolocation":
							   def geo = new JsonSlurper().parseText(value)
							   jsonBuilder.lng = geo.lng
							   jsonBuilder.lat = geo.lat
							   break
						   case "LocationName":
							   jsonBuilder.name = value
							   break
						   case "Address2":
							   jsonBuilder.street = value
							   break
						   case "Address":
							   jsonBuilder.streetNo = value
							   break
						   case "Postcode":
							   jsonBuilder.zip = value
							   break
						   case "TownCity":
							   jsonBuilder.city = value
							   break
						   case "PhoneNumber":
							   jsonBuilder.phone = "+44${value}"
							   break
						   case "isLocationClosed":
							   jsonBuilder.status = value == "true" ? "CLOSED" : "ACTIVE"
							   break
					   }
				   } else if (key == "OpeningHours") {
					   def dayName = element.elements("dynamic-element").find {
						   it.attributeValue("field-reference") == "DayName"
					   }?.element("dynamic-content")?.textTrim

					   if (dayName) {
						   def dayHours = [dayOfWeek: openingdays[dayName]]
						   def isClosed = element.elements("dynamic-element").find {
							   it.attributeValue("field-reference") == "isClosed"
						   }?.element("dynamic-content")?.textTrim == "true"

						   if (isClosed) {
							   dayHours.closed = true
						   } else {
							   def timeSlots = element.elements("dynamic-element").findAll {
								   it.attributeValue("field-reference") == "Fieldset54865370"
							   }

							   timeSlots.take(2).eachWithIndex { slot, idx ->
								   def openTime = slot.elements("dynamic-element").find {
									   it.attributeValue("field-reference") == "Open"
								   }?.element("dynamic-content")?.textTrim
								   def closeTime = slot.elements("dynamic-element").find {
									   it.attributeValue("field-reference") == "Close"
								   }?.element("dynamic-content")?.textTrim

								   if (openTime && closeTime) {
									   dayHours["from${idx + 1}"] = openTime
									   dayHours["to${idx + 1}"] = closeTime
								   }
							   }
						   }
						   jsonBuilder.openingHours << dayHours
					   }
					} else if (key == "PublisherImages") {
						try {
							def publisherType = element.elements("dynamic-element").find {
								it.attributeValue("field-reference") == "Publisher"
							}?.element("dynamic-content")?.textTrim

							def fileData = element.elements("dynamic-element").find {
								it.attributeValue("field-reference") == "File"
							}?.element("dynamic-content")?.textTrim

							if (fileData) {
								def fileJson = new JsonSlurper().parseText(fileData)
								def filePath = CONTEXT_PATH + fileJson.title?.toLowerCase()?.replaceAll(/[^a-z0-9\s-]/, "-")?.replaceAll(/\s+/, "-")?.replaceAll(/-+/, "-")?.replaceAll(/^-+|-+$/, "") ?: ""

								jsonBuilder.photos << [
									main: false,
									logo: false,
									type: publisherType?.contains("Google") ? "LANDSCAPE" :
										  publisherType?.contains("Facebook") ? "FACEBOOK_LANDSCAPE" : "MAIN",
									url: filePath
								]
							}
						} catch (e) {
							println "Error processing publisher image: ${e.message}"
						}
					}
			   }

			   try {
				   def result = callUberallApi(jsonBuilder, article)
				   println jsonBuilder.name + " Location has uploaded on Uberall."
			   } catch (Exception apiError) {
				   println "Failed to send data to Uberall: ${apiError.message}"
			   }
			} else {
				println "Yext restrictions or isCSVLocation not enabled, skipping processing"
			}
		}
	} catch (Exception e) {
		println "ERROR in main processing: ${e.message}"
	}
}
]]>
				</script>
				<script-language>groovy</script-language>
				<priority>1</priority>
				<execution-type>onEntry</execution-type>
			</action>
		</actions>
		<initial>true</initial>
		<labels>
			<label language-id="en_US">created</label>
		</labels>
		<transitions>
			<transition>
				<labels>
					<label language-id="en_US">review</label>
				</labels>
				<name>created_review_review</name>
				<target>review</target>
				<default>true</default>
			</transition>
		</transitions>
	</state>
	<state>
		<name>approved</name>
		<description>Conclude the workflow.</description>
		<metadata>
			<![CDATA[
				{
					"xy": [
						539,
						74
					],
					"terminal": true
				}
			
]]>
		</metadata>
		<actions>
			<action>
				<name>approve</name>
				<status>0</status>
				<execution-type>onEntry</execution-type>
			</action>
			<action>
				<name>Uberall call After Approval</name>
				<description></description>
				<script>
					<![CDATA[import com.liferay.journal.model.JournalArticle
import com.liferay.journal.service.JournalArticleLocalServiceUtil
import com.liferay.portal.kernel.service.GroupLocalServiceUtil
import com.liferay.expando.kernel.model.ExpandoBridge
import org.dom4j.Element
import org.dom4j.io.SAXReader
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

UBERALL_ENDPOINT_KEYNAME = "Uberall Endpoint"
UBERALL_BUSINESS_ID_KEYNAME = "Uberall Business Id"
UBERALL_PRIVATE_KEYNAME = "Uberall Private Key"
UBERALL_DUPLICATE_UPDATE_KEYNAME = "Uberall Update Workflow"
CEMEX_LIFERAY_DOMAIN = "http://localhost:8080/"

String className = (String)workflowContext.get("entryClassName")
long classPK = Long.parseLong(workflowContext.get("entryClassPK"))
long groupId = Long.parseLong(workflowContext.get("groupId"))

ExpandoBridge expandoBridge = GroupLocalServiceUtil.getGroup(groupId).getExpandoBridge()
UBERALL_ENDPOINT = (String) expandoBridge.getAttribute(UBERALL_ENDPOINT_KEYNAME, false)
UBERALL_BUSINESS_ID = (String) expandoBridge.getAttribute(UBERALL_BUSINESS_ID_KEYNAME, false)
UBERALL_PRIVATE_KEY = (String) expandoBridge.getAttribute(UBERALL_PRIVATE_KEYNAME, false)
UBERALL_DUPLICATE_UPDATE = (Boolean) expandoBridge.getAttribute(UBERALL_DUPLICATE_UPDATE_KEYNAME, false)

if (UBERALL_ENDPOINT == null || UBERALL_BUSINESS_ID == null || UBERALL_PRIVATE_KEY == null) {
	println "ERROR: Missing Uberall configuration. Skipping execution."
	return
}

UBERALL_API_ENDPOINT = UBERALL_ENDPOINT + "?businessIds=" + UBERALL_BUSINESS_ID
CONTEXT_PATH = CEMEX_LIFERAY_DOMAIN + "/documents/d/location-application-uk/"

def callUberallApi(Map locationData, JournalArticle article) {
	try {
		def jsonBody = JsonOutput.toJson(locationData)
		def isUpdate = article.getVersion() != 1
		def methodType = isUpdate ? "PATCH" : "POST"
		def endpoint = UBERALL_API_ENDPOINT

		if (isUpdate) {
			def locationId = getUberallLocationByArticleId(article.getArticleId(), article.titleCurrentValue)
			if (locationId) {
				endpoint = "${UBERALL_ENDPOINT}/${locationId}"
			} else {
				methodType = "POST"
			}
		}

		def url = new URL(endpoint)
		def connection = url.openConnection()
		connection.setRequestMethod("POST")
		connection.setRequestProperty("Content-Type", "application/json")
		connection.setRequestProperty("privateKey", UBERALL_PRIVATE_KEY)
		connection.setRequestProperty("Cache-Control", "no-cache")

		if (methodType == "PATCH") {
			connection.setRequestProperty("X-HTTP-Method-Override", "PATCH")
		}

		connection.setDoOutput(true)

		def outputStream = connection.getOutputStream()
		outputStream.write(jsonBody.getBytes("UTF-8"))
		outputStream.flush()
		outputStream.close()

		def responseCode = connection.getResponseCode()
		def responseStream = responseCode >= 200 && responseCode < 300 ?
			connection.getInputStream() : connection.getErrorStream()
		def response = responseStream.getText()

		if (responseCode >= 200 && responseCode < 300) {
			return new JsonSlurper().parseText(response)
		} else if (responseCode == 409 && UBERALL_DUPLICATE_UPDATE) {
			def jsonResponse = new JsonSlurper().parseText(response)
			def duplicates = jsonResponse?.response?.duplicates

			if (duplicates && duplicates.size() > 0) {
				def duplicateId = duplicates[0]
				endpoint = "${UBERALL_ENDPOINT}/${duplicateId}"
				locationData.put("id", duplicateId)
				return callUberallApi(locationData, article)
			}
			throw new Exception("Duplicate found but no ID available")
		} else {
			throw new Exception("Failed to call Uberall API: ${responseCode} - ${response}")
		}

	} catch (Exception e) {
		println "ERROR: ${e.message}"
		throw e
	}
}

def getUberallLocationByArticleId(String articleId, String articleName) {
	try {
		def urlString = "${UBERALL_ENDPOINT}?fieldMask=province&fieldMask=name&max=100000&selectAll=true"
		def connection = new URL(urlString).openConnection()
		connection.setRequestMethod('GET')
		connection.setRequestProperty('Content-Type', 'application/json')
		connection.setRequestProperty('privateKey', UBERALL_PRIVATE_KEY)

		def responseCode = connection.getResponseCode()

		if (responseCode == 200) {
			def jsonResponse = new JsonSlurper().parseText(connection.inputStream.text)
			def locations = jsonResponse?.response?.locations

			def foundLocation = locations?.find { location ->
				location.province == articleId || location.name == articleName
			}

			return foundLocation?.id
		}
		return null
	} catch (Exception e) {
		println "ERROR in uberall location search: ${e.message}"
		return null
	}
}

if (className.equals("com.liferay.journal.model.JournalArticle")) {
	try {
		JournalArticle article = JournalArticleLocalServiceUtil.getArticle(classPK)
		def jsonBuilder = [
			businessId: UBERALL_BUSINESS_ID,
			status: "ACTIVE",
			province: article.getArticleId(),
			country: "UK",
			openingHours: [],
			photos: []
		]

		def openingdays = [
			Monday: 1, Tuesday: 2, Wednesday: 3,
			Thursday: 4, Friday: 5, Saturday: 6, Sunday: 7
		]

		if (article) {
			def elements = new SAXReader().read(new StringReader(article.getContent()))
							.getRootElement()
							.elements("dynamic-element")
			def isYextRestricted = elements.find {
				it.attributeValue("field-reference") == "isYextRestrict"
			}?.element("dynamic-content")?.textTrim == "true"

			if (isYextRestricted) {
			   elements.each { element ->
				   def key = element.attributeValue("field-reference")
				   def valueContent = element.element("dynamic-content")

				   if (valueContent) {
					   def value = valueContent.textTrim

					   switch(key) {
						   case "Geolocation":
							   def geo = new JsonSlurper().parseText(value)
							   jsonBuilder.lng = geo.lng
							   jsonBuilder.lat = geo.lat
							   break
						   case "LocationName":
							   jsonBuilder.name = value
							   break
						   case "Address2":
							   jsonBuilder.street = value
							   break
						   case "Address":
							   jsonBuilder.streetNo = value
							   break
						   case "Postcode":
							   jsonBuilder.zip = value
							   break
						   case "TownCity":
							   jsonBuilder.city = value
							   break
						   case "PhoneNumber":
							   jsonBuilder.phone = "+44${value}"
							   break
						   case "isLocationClosed":
							   jsonBuilder.status = value == "true" ? "CLOSED" : "ACTIVE"
							   break
					   }
				   } else if (key == "OpeningHours") {
					   def dayName = element.elements("dynamic-element").find {
						   it.attributeValue("field-reference") == "DayName"
					   }?.element("dynamic-content")?.textTrim

					   if (dayName) {
						   def dayHours = [dayOfWeek: openingdays[dayName]]
						   def isClosed = element.elements("dynamic-element").find {
							   it.attributeValue("field-reference") == "isClosed"
						   }?.element("dynamic-content")?.textTrim == "true"

						   if (isClosed) {
							   dayHours.closed = true
						   } else {
							   def timeSlots = element.elements("dynamic-element").findAll {
								   it.attributeValue("field-reference") == "Fieldset54865370"
							   }

							   timeSlots.take(2).eachWithIndex { slot, idx ->
								   def openTime = slot.elements("dynamic-element").find {
									   it.attributeValue("field-reference") == "Open"
								   }?.element("dynamic-content")?.textTrim
								   def closeTime = slot.elements("dynamic-element").find {
									   it.attributeValue("field-reference") == "Close"
								   }?.element("dynamic-content")?.textTrim

								   if (openTime && closeTime) {
									   dayHours["from${idx + 1}"] = openTime
									   dayHours["to${idx + 1}"] = closeTime
								   }
							   }
						   }
						   jsonBuilder.openingHours << dayHours
					   }
					} else if (key == "PublisherImages") {
						try {
							def publisherType = element.elements("dynamic-element").find {
								it.attributeValue("field-reference") == "Publisher"
							}?.element("dynamic-content")?.textTrim

							def fileData = element.elements("dynamic-element").find {
								it.attributeValue("field-reference") == "File"
							}?.element("dynamic-content")?.textTrim

							if (fileData) {
								def fileJson = new JsonSlurper().parseText(fileData)
								def filePath = CONTEXT_PATH + fileJson.title?.toLowerCase()?.replaceAll(/[^a-z0-9\s-]/, "-")?.replaceAll(/\s+/, "-")?.replaceAll(/-+/, "-")?.replaceAll(/^-+|-+$/, "") ?: ""

								jsonBuilder.photos << [
									main: false,
									logo: false,
									type: publisherType?.contains("Google") ? "LANDSCAPE" :
										  publisherType?.contains("Facebook") ? "FACEBOOK_LANDSCAPE" : "MAIN",
									url: filePath
								]
							}
						} catch (e) {
							println "Error processing publisher image: ${e.message}"
						}
					}
			   }

			   try {
				   def result = callUberallApi(jsonBuilder, article);
				   println jsonBuilder.name + " Location has uploaded on Uberall."
			   } catch (Exception apiError) {
				   println "Failed to send data to Uberall: ${apiError.message}"
			   }
			} else {
				println "Yext restrictions not enabled, skipping processing"
			}
		}
	} catch (Exception e) {
		println "ERROR in main processing: ${e.message}"
	}
}
]]>
				</script>
				<script-language>groovy</script-language>
				<priority>1</priority>
				<execution-type>onEntry</execution-type>
			</action>
		</actions>
		<labels>
			<label language-id="en_US">approved</label>
		</labels>
	</state>
	<task>
		<name>update</name>
		<metadata>
			<![CDATA[
				{
					"xy": [
						164,
						533
					]
				}
			
]]>
		</metadata>
		<actions>
			<action>
				<name>deny</name>
				<status>4</status>
				<priority>1</priority>
				<execution-type>onAssignment</execution-type>
			</action>
			<action>
				<name>pending</name>
				<status>1</status>
				<priority>2</priority>
				<execution-type>onAssignment</execution-type>
			</action>
			<notification>
				<name>Creator Modification Notification</name>
				<template>
					<![CDATA[Your submission was rejected by ${userName}, please modify and resubmit.
]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<notification-type>user-notification</notification-type>
				<recipients receptionType="to">
					<user></user>
				</recipients>
				<execution-type>onAssignment</execution-type>
			</notification>
		</actions>
		<assignments>
			<user></user>
		</assignments>
		<labels>
			<label language-id="en_US">update</label>
		</labels>
		<transitions>
			<transition>
				<labels>
					<label language-id="en_US">resubmit</label>
				</labels>
				<name>resubmit</name>
				<target>review</target>
				<default>true</default>
			</transition>
		</transitions>
	</task>
	<task>
		<name>review</name>
		<description>Ask a user to work on the item.</description>
		<metadata>
			<![CDATA[
				{
					"xy": [
						166.00006103515625,
						286.9999771118164
					]
				}
			
]]>
		</metadata>
		<actions>
			<action>
				<name>Test</name>
				<description></description>
				<script></script>
				<script-language>groovy</script-language>
				<priority>1</priority>
				<execution-type>onAssignment</execution-type>
			</action>
			<notification>
				<name>Review Notification</name>
				<template>
					<![CDATA[${userName} sent you a ${entryType} for review in the workflow.
]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<notification-type>user-notification</notification-type>
				<recipients receptionType="to">
					<assignees></assignees>
				</recipients>
				<execution-type>onAssignment</execution-type>
			</notification>
			<notification>
				<name>Review Completion Notification</name>
				<template>
					<![CDATA[Your submission was reviewed<#if taskComments?has_content> and the reviewer applied the following ${taskComments}</#if>.
]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<recipients receptionType="to">
					<user></user>
				</recipients>
				<execution-type>onExit</execution-type>
			</notification>
		</actions>
		<assignments>
			<roles>
				<role>
					<role-type>regular</role-type>
					<name>Content Approver - United Kingdom</name>
					<auto-create>false</auto-create>
				</role>
				<role>
					<role-type>account</role-type>
					<name>Account Member</name>
					<auto-create>false</auto-create>
				</role>
				<role>
					<role-type>account</role-type>
					<name>Order Manager</name>
					<auto-create>false</auto-create>
				</role>
				<role>
					<role-type>depot</role-type>
					<name>Asset Library Administrator</name>
					<auto-create>false</auto-create>
				</role>
				<role>
					<role-type>depot</role-type>
					<name>Asset Library Content Reviewer</name>
					<auto-create>false</auto-create>
				</role>
				<role>
					<role-type>depot</role-type>
					<name>Asset Library Owner</name>
					<auto-create>false</auto-create>
				</role>
				<role>
					<role-type>organization</role-type>
					<name>Organization Administrator</name>
					<auto-create>false</auto-create>
				</role>
				<role>
					<role-type>organization</role-type>
					<name>Organization Content Reviewer</name>
					<auto-create>false</auto-create>
				</role>
				<role>
					<role-type>organization</role-type>
					<name>Organization Owner</name>
					<auto-create>false</auto-create>
				</role>
				<role>
					<role-type>regular</role-type>
					<name>Administrator</name>
					<auto-create>false</auto-create>
				</role>
				<role>
					<role-type>regular</role-type>
					<name>Portal Content Reviewer</name>
					<auto-create>false</auto-create>
				</role>
				<role>
					<role-type>site</role-type>
					<name>Site Administrator</name>
					<auto-create>false</auto-create>
				</role>
				<role>
					<role-type>site</role-type>
					<name>Site Content Reviewer</name>
					<auto-create>false</auto-create>
				</role>
				<role>
					<role-type>site</role-type>
					<name>Site Owner</name>
					<auto-create>false</auto-create>
				</role>
			</roles>
		</assignments>
		<labels>
			<label language-id="en_US">review</label>
		</labels>
		<transitions>
			<transition>
				<labels>
					<label language-id="en_US">approve</label>
				</labels>
				<name>approve</name>
				<target>approved</target>
				<default>true</default>
			</transition>
			<transition>
				<labels>
					<label language-id="en_US">reject</label>
				</labels>
				<name>reject</name>
				<target>update</target>
				<default>false</default>
			</transition>
		</transitions>
	</task>
</workflow-definition>